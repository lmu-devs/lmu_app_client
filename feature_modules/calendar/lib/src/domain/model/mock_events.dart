import 'package:core/api.dart';
import 'package:flutter/material.dart';

import '../../infrastructure/secondary/data/dto/calendar_entry_dto.dart';
import '../../infrastructure/secondary/data/dto/calendar_entry_mapper.dart';
import 'calendar_entry.dart';
import 'event_type.dart';

final mockCalendarEntries = [
  CalendarEntry(
    id: 'event_ooo1',
    title: 'Overlapping Event 1',
    eventType: EventType.exam,
    color: Colors.pinkAccent,
    startTime: DateTime.now().add(const Duration(minutes: 20)),
    endTime: DateTime.now().add(const Duration(minutes: 60)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 2',
    eventType: EventType.exam,
    color: Colors.pink,
    startTime: DateTime.now().add(const Duration(minutes: 10)),
    endTime: DateTime.now().add(const Duration(minutes: 50)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 2',
    eventType: EventType.exam,
    color: Colors.purpleAccent,
    startTime: DateTime.now().add(const Duration(minutes: 40)),
    endTime: DateTime.now().add(const Duration(minutes: 70)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_noo1',
    title: 'Not Overlapping Event 3',
    eventType: EventType.exam,
    color: Colors.green,
    startTime: DateTime.now().add(const Duration(minutes: 71)),
    endTime: DateTime.now().add(const Duration(minutes: 110)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_noo1',
    title: 'Not Overlapping Event 3',
    eventType: EventType.lecture,
    color: Colors.greenAccent,
    startTime: DateTime.now().add(const Duration(minutes: 140)),
    endTime: DateTime.now().add(const Duration(minutes: 250)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 6',
    eventType: EventType.sport,
    color: Colors.blue,
    startTime: DateTime.now().add(const Duration(minutes: 310)),
    endTime: DateTime.now().add(const Duration(minutes: 350)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 5',
    eventType: EventType.exam,
    color: Colors.blueAccent,
    startTime: DateTime.now().add(const Duration(minutes: 340)),
    endTime: DateTime.now().add(const Duration(minutes: 370)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  // CalendarEntry(
  //   id: 'event_456',
  //   title: 'ZukunftsGeschenk',
  //   type: EventType.exam,
  //   color: Colors.purple,
  //   startTime: DateTime.now().add(const Duration(days: 1)),
  //   endTime: DateTime.now().add(const Duration(days: 1, hours: 2)),
  //   location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Ein Event, dass immer in der zukunft liegt egal was!',
  //   allDay: false,
  // ),
  // CalendarEntry(
  //   id: 'event_456',
  //   title: 'Flutter Workshop 4',
  //   type: EventType.movie,
  //   color: Colors.green,
  //   startTime: DateTime.now().add(const Duration(hours: 1)),
  //   endTime: DateTime.now().add(const Duration(hours: 2)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'A  comprehensive workshop on Flutter development.',
  //   allDay: false,
  // ),
  // CalendarEntry(
  //   id: 'event_456',
  //   title: 'Flutter Workshop 3',
  //   type: EventType.movie,
  //   color: Colors.red,
  //   startTime: DateTime.now().subtract(const Duration(minutes: 60)),
  //   endTime: DateTime.now().subtract(const Duration(minutes: 10)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'A  comprehensive workshop on Flutter development.',
  //   allDay: false,
  // ),
  // CalendarEntry(
  //   id: 'event_789',
  //   title: 'Design Sprint',
  //   type: EventType.lecture,
  //   color: Colors.tealAccent,
  //   startTime: DateTime.now().subtract(const Duration(minutes: 120)),
  //   endTime: DateTime.now().subtract(const Duration(minutes: 75)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'A design sprint to solve user problems.',
  //   allDay: true,
  // ),
  // CalendarEntry(
  //   id: 'event_101',
  //   title: 'Team Meeting',
  //   type: EventType.lecture,
  //   color: Colors.orange,
  //   startTime: DateTime.now().subtract(const Duration(days: 1, hours: 2)),
  //   endTime: DateTime.now().add(const Duration(days: 1, hours: 2)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Weekly team sync-up meeting.',
  //   allDay: false,
  // ),
  // CalendarEntry(
  //   id: 'event_102',
  //   title: 'Project Kickoff II',
  //   type: EventType.movie,
  //   color: Colors.blue,
  //   startTime: DateTime.now().subtract(const Duration(days: 3, hours: 2)),
  //   endTime: DateTime.now().add(const Duration(days: 3, hours: 2)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Kickoff meeting for the new project.',
  //   allDay: true,
  // ),
  // CalendarEntry(
  //   id: 'event_101',
  //   title: 'Team Meeting',
  //   type: EventType.lecture,
  //   color: Colors.orange,
  //   startTime: DateTime.now().subtract(const Duration(days: 4, hours: 2)),
  //   endTime: DateTime.now().add(const Duration(days: 4, hours: 2)),
  //   location: const LocationModel(address: 'Ludwigstraße 1, München', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Weekly team sync-up meeting.',
  //   allDay: false,
  // ),
];

// Function to create mock CalendarEntryDto list
List<CalendarEntryDto> createMockCalendarEntryDtos() {
  return mockCalendarEntries.map((entry) {
    final CalendarEntryDto dto = CalendarEntryMapper.toDto(entry);

    return CalendarEntryDto(
      id: dto.id,
      title: '${dto.title} (from DTO)',
      eventType: dto.eventType,
      startTime: dto.startTime,
      endTime: dto.endTime,
      color: dto.color,
      location: dto.location,
      allDay: dto.allDay,
      description: dto.description,
      rule: dto.rule,
      recurrenceId: dto.recurrenceId,
      createdAt: dto.createdAt,
      updatedAt: dto.updatedAt,
    );
  }).toList();
}
