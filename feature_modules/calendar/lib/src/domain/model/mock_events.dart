import 'package:core/api.dart';
import 'package:flutter/material.dart';

import '../../infrastructure/secondary/data/dto/calendar_entry_dto.dart';
import '../../infrastructure/secondary/data/dto/calendar_entry_mapper.dart';
import 'calendar_entry.dart';
import 'calendar_rule.dart';
import 'event_type.dart';
import 'frequency.dart';

final mockCalendarEntries = [
  CalendarEntry(
    id: 'event_ooo1',
    title: 'Overlapping Event 1',
    eventType: EventType.lecture,
    color: Colors.pinkAccent,
    startTime: DateTime.now().add(const Duration(minutes: 20)),
    endTime: DateTime.now().add(const Duration(minutes: 60)),
    location: const LocationModel(address: 'www.online.de', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 2',
    eventType: EventType.exam,
    color: Colors.pink,
    startTime: DateTime.now().add(const Duration(minutes: 10)),
    endTime: DateTime.now().add(const Duration(minutes: 50)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  // CalendarEntry(
  //   id: 'event_ooo2',
  //   title: 'Overlapping Event 2',
  //   eventType: EventType.lecture,
  //   color: Colors.purpleAccent,
  //   startTime: DateTime.now().add(const Duration(minutes: 40)),
  //   endTime: DateTime.now().add(const Duration(minutes: 70)),
  //   location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Ein Event, dass immer in der zukunft liegt egal was!',
  //   allDay: false,
  // ),
  CalendarEntry(
    id: 'event_noo1',
    title: 'Not Overlapping Event 3 mit einem Super Langen Ttel, den es sonst so nie gegeben haben sollte',
    eventType: EventType.lecture,
    color: Colors.green,
    startTime: DateTime.now().subtract(const Duration(minutes: 171)),
    endTime: DateTime.now().subtract(const Duration(minutes: 110)),
    location: const LocationModel(address: 'Die zUkuNfT 1, 85690 München', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
    rule: CalendarRule(
      frequency: Frequency.daily,
      interval: 2,
      untilTime: DateTime.now().add(const Duration(days: 10)),
    ),
  ),
  CalendarEntry(
    id: 'event_noo1',
    title: 'Not Overlapping Event 4 - mit einem super langen titel und einer langen laufzeit',
    eventType: EventType.lecture,
    color: Colors.greenAccent,
    startTime: DateTime.now().subtract(const Duration(minutes: 250)),
    endTime: DateTime.now().subtract(const Duration(minutes: 140)),
    location: const LocationModel(
        address: 'Die zUkuNfT 22, Großhardernerstraße 158b, 85940 München, Raum C 150 & C 151',
        latitude: 48.1500,
        longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
    rule: CalendarRule(
      frequency: Frequency.daily,
      interval: 2,
      untilTime: DateTime.now().add(const Duration(days: 10)),
    ),
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 6',
    eventType: EventType.sport,
    color: Colors.blue,
    startTime: DateTime.now().add(const Duration(minutes: 310)),
    endTime: DateTime.now().add(const Duration(minutes: 350)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Overlapping Event 5',
    eventType: EventType.lecture,
    color: Colors.blueAccent,
    startTime: DateTime.now().add(const Duration(minutes: 340)),
    endTime: DateTime.now().add(const Duration(minutes: 370)),
    location: const LocationModel(address: 'https://www.test.de', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo2',
    title: 'Das Schweigen der Lämmer',
    eventType: EventType.movie,
    color: const Color.fromARGB(255, 255, 96, 68),
    startTime: DateTime.now().add(const Duration(minutes: 190)),
    endTime: DateTime.now().add(const Duration(minutes: 300)),
    location: const LocationModel(address: 'https://www.test.de', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo32',
    title: 'Overlapping Event 3.1',
    eventType: EventType.exam,
    color: Colors.yellow,
    startTime: DateTime.now().add(const Duration(hours: 7, minutes: 20)),
    endTime: DateTime.now().add(const Duration(hours: 9, minutes: 60)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_ooo32',
    title: 'Overlapping Event 3.2',
    eventType: EventType.exam,
    color: Colors.yellow[700]!,
    startTime: DateTime.now().add(const Duration(hours: 7, minutes: 40)),
    endTime: DateTime.now().add(const Duration(hours: 7, minutes: 60)),
    location: const LocationModel(address: 'Die zUkuNfT 1', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_morgen1',
    title: 'Morgiges Event 1',
    eventType: EventType.movie,
    color: const Color.fromARGB(255, 55, 251, 45),
    startTime: DateTime.now().add(const Duration(hours: 24, minutes: 140)),
    endTime: DateTime.now().add(const Duration(hours: 24, minutes: 190)),
    location: const LocationModel(address: 'Zukunftsstraße 12', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  CalendarEntry(
    id: 'event_morgen2',
    title: 'Morgiges Event 2',
    eventType: EventType.lecture,
    color: const Color.fromARGB(255, 20, 168, 13),
    startTime: DateTime.now().add(const Duration(hours: 24, minutes: 120)),
    endTime: DateTime.now().add(const Duration(hours: 24, minutes: 180)),
    location: const LocationModel(address: 'www.diezukunft.de/23235235', latitude: 48.1500, longitude: 11.5800),
    description: 'Ein Event, dass immer in der zukunft liegt egal was!',
    allDay: false,
  ),
  // CalendarEntry(
  //   id: 'event_morgen1',
  //   title: 'Morgiges Event 1',
  //   eventType: EventType.movie,
  //   color: const Color.fromARGB(255, 55, 251, 45),
  //   startTime: DateTime.now().add(const Duration(hours: 24, minutes: 40)),
  //   endTime: DateTime.now().add(const Duration(hours: 24, minutes: 60)),
  //   location: const LocationModel(address: 'Zukunftsstraße 12', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Ein Event, dass immer in der zukunft liegt egal was!',
  //   allDay: false,
  // ),
  // CalendarEntry(
  //   id: 'event_morgen2',
  //   title: 'Morgiges Event 2',
  //   eventType: EventType.lecture,
  //   color: const Color.fromARGB(255, 20, 168, 13),
  //   startTime: DateTime.now().add(const Duration(hours: 24, minutes: 40)),
  //   endTime: DateTime.now().add(const Duration(hours: 24, minutes: 60)),
  //   location: const LocationModel(address: 'www.diezukunft.de/23235235', latitude: 48.1500, longitude: 11.5800),
  //   description: 'Ein Event, dass immer in der zukunft liegt egal was!',
  //   allDay: false,
  // ),
];

// Function to create mock CalendarEntryDto list
List<CalendarEntryDto> createMockCalendarEntryDtos() {
  return mockCalendarEntries.map((entry) {
    final CalendarEntryDto dto = CalendarEntryMapper.toDto(entry);

    return CalendarEntryDto(
      id: dto.id,
      title: '${dto.title} (from DTO)',
      eventType: dto.eventType,
      startTime: dto.startTime,
      endTime: dto.endTime,
      color: dto.color,
      location: dto.location,
      allDay: dto.allDay,
      description: dto.description,
      rule: dto.rule,
      recurrenceId: dto.recurrenceId,
      createdAt: dto.createdAt,
      updatedAt: dto.updatedAt,
    );
  }).toList();
}
